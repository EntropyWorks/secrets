package store

import (
	"log"
	"sync"
	"time"

	"github.com/nu7hatch/gouuid"
	"github.com/umputun/secrets/app/crypt"
)

// InMemory implements store.Interface with concurent map
type InMemory struct {
	sync.Mutex
	crypt.Crypt
	data        map[string]Message
	maxDuration time.Duration
}

// NewInMemory makes new store with max duration
func NewInMemory(crypt crypt.Crypt, maxDuration time.Duration) *InMemory {
	result := InMemory{maxDuration: maxDuration, Crypt: crypt, data: map[string]Message{}}
	result.activateCleaner()
	return &result
}

// Save to map with autogenerated uuid as a key
func (s *InMemory) Save(duration time.Duration, msg string, pin string) (result Message, err error) {

	if duration > s.maxDuration {
		log.Printf("[WARN] save rejected, duration is too long (%v)", duration)
		return Message{}, ErrSaveRejected
	}

	if pin == "" {
		log.Printf("[WARN] save rejected, empty pin")
		return Message{}, ErrSaveRejected
	}

	pinHash, err := MakeHash(pin)
	if err != nil {
		log.Printf("[ERROR] can't hash pin, %v", err)
		return Message{}, ErrSaveRejected
	}

	s.Lock()
	defer s.Unlock()

	key, err := uuid.NewV4()
	if err != nil {
		return Message{}, ErrSaveRejected

	}

	result.Data, err = s.Encrypt(crypt.Request{Data: msg, Pin: pin})
	if err != nil {
		log.Printf("[ERROR] failed to encrypt, %v", err)
		return Message{}, ErrSaveRejected
	}
	result.Key = key.String()
	result.Exp = time.Now().Add(duration)
	result.PinHash = pinHash
	s.data[result.Key] = result
	log.Printf("[DEBUG] saved %s... (%v), total %d", result.Key[:6], result.Exp, len(s.data))
	return result, nil
}

// Load by key, removes on first access, checks expire
func (s *InMemory) Load(key string, pin string) (Message, error) {
	s.Lock()
	defer s.Unlock()

	remove := func(key string) {
		delete(s.data, key)
		log.Printf("[DEBUG] removed %s", key)
	}

	if msg, ok := s.data[key]; ok {
		if time.Now().After(msg.Exp) {
			log.Printf("[WARN] expired %s on %v", key, msg.Exp)
			remove(key)
			return Message{}, ErrNoSuchThing
		}
		if !CheckHash(msg, pin) {
			msg.Errors++
			log.Printf("[WARN] wrong pin provided (%d times)", msg.Errors)
			s.data[key] = msg
			if msg.Errors > 3 {
				remove(key)
			}
			return Message{}, ErrBadPin
		}
		remove(key)

		r, err := s.Decrypt(crypt.Request{Data: msg.Data, Pin: pin})
		if err != nil {
			log.Printf("[WARN] can't encrypt, %v", err)
			return Message{}, ErrBadPin

		}
		msg.Data = r
		return msg, nil
	}

	log.Printf("[INFO] not found %s", key)
	return Message{}, ErrNoSuchThing
}

func (s *InMemory) activateCleaner() {
	log.Print("[INFO] activate cleaner")

	ticker := time.NewTicker(time.Minute * 5)
	go func() {
		for t := range ticker.C {
			s.Lock()
			for k, v := range s.data {
				if v.Exp.After(time.Now()) {
					delete(s.data, k)
					log.Printf("[INFO] cleaned %s on %v", k, t)
				}
			}
			s.Unlock()
		}
	}()
}
