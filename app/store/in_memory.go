package store

import (
	"log"
	"sync"
	"time"

	"github.com/umputun/secrets/app/crypt"
)

// InMemory implements store.Interface with concurent map
type InMemory struct {
	sync.Mutex
	data map[string]Message
}

// NewInMemory makes new store with max duration
func NewInMemory(crypt crypt.Crypt, maxDuration time.Duration) *InMemory {
	result := InMemory{
		data: map[string]Message{},
	}
	result.activateCleaner()
	return &result
}

// Save to map with autogenerated uuid as a key
func (s *InMemory) Save(msg *Message) (err error) {

	s.Lock()
	defer s.Unlock()

	s.data[msg.Key] = *msg
	log.Printf("[DEBUG] saved %s... (%v), total %d", msg.Key[:6], msg.Exp, len(s.data))
	return nil
}

// Load by key, removes on first access, checks expire
func (s *InMemory) Load(key string) (result *Message, err error) {

	s.Lock()
	defer s.Unlock()
	msg, ok := s.data[key]

	if !ok {
		log.Printf("[INFO] not found %s", key)
		return nil, ErrLoadRejected
	}

	return &msg, nil
}

// IncErr increments error count
func (s *InMemory) IncErr(key string) (count int, err error) {
	s.Lock()
	defer s.Unlock()
	msg, ok := s.data[key]

	if !ok {
		log.Printf("[INFO] not found %s", key)
		return 0, ErrLoadRejected
	}
	msg.Errors++
	s.data[key] = msg
	return msg.Errors, nil
}

// Remove by key
func (s *InMemory) Remove(key string) (err error) {
	s.Lock()
	defer s.Unlock()
	delete(s.data, key)
	log.Printf("[DEBUG] removed %s", key)
	return nil
}

func (s *InMemory) activateCleaner() {
	log.Print("[INFO] activate cleaner")

	ticker := time.NewTicker(time.Minute * 5)
	go func() {
		for t := range ticker.C {
			s.Lock()
			for k, v := range s.data {
				if v.Exp.After(time.Now()) {
					delete(s.data, k)
					log.Printf("[INFO] cleaned %s on %v", k, t)
				}
			}
			s.Unlock()
		}
	}()
}
